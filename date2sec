#!/usr/bin/env python3
import sys, os, argparse
sys.path.insert(0, "{}/lib/python{}.{}".format(os.environ['GCOREBUILD'], \
                sys.version_info[0], sys.version_info[1]))
from gcore.dateUtils import cal2sec 

__doc__ = '''
May also be invoked as date2sec.

'''+cal2sec.__doc__

Epilog = '''

**Examples**

::

    cal2sec.py 2015-01-02 07:42:01 1 days
    473456521.0

::

    cal2sec.py 2015-01-02 07:42:01 -1 days
    473370121.0

Get current system time in our standard format(gpstime) of seconds
past 2000-01-01 11:59:47 UTC rounded to the nearest 60 seconds
-15 minutes and round to the nearest minute:
::

    cal2sec.py now -15 mins round 60; cal2sec.py now -15 mins round 60 | sec2date; date
    483695220.0
    2015-04-30 19:47:00
    Thu Apr 30 13:01:47 PDT 2015

Get current system time in our standard format(gpstime) of seconds
past 2000-01-01 11:59:47 UTC rounded to the nearest 300 seconds
::

    cal2sec.py now round 300
    478689300.0

Get input from standard in
::
    perl -e 'print "2015-01-02 07:42:01 -1 days\\n 2000-01-01"' | cal2sec.py
    473370121.0
    -43200.0

Keywords: calendar, date, gpstime

'''
def _getParser():   # our special code to use sphinx argparse requires argparse be wrap with this exact funtion name.
    argParser = argparse.ArgumentParser(description= __doc__, epilog=Epilog, 
                 #formatter_class=argparse.ArgumentDefaultsHelpFormatter)
                 formatter_class=argparse.RawDescriptionHelpFormatter ) 
                 #without this won't write verbatim

    argParser.add_argument('calendar', nargs='*',
                           default=None,
                           help = '''YYYY-MM-DD|now HH:MM:SS [ndelta Unit(days hours mins secs)] [round n]
                           ''')
    return argParser

if __name__ == '__main__':
    args = _getParser().parse_args()

    if len(args.calendar) > 0:
        try:
            print( cal2sec( *args.calendar ) )
        except Exception as e:
            print('Error in input: {}'.format(e))
    else:
        for l in sys.stdin:
            a = l.split()
            try:
                print( cal2sec(*a) )
            except Exception as e:
                print('Error in input: {}'.format(e))
