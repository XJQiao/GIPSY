#!/usr/bin/env python3
'''
Converts seconds past 2000-01-01 12:00.0000 to a string
YYYY-MM-DD HH:MM:SS or  YYYY-MM-DD HH:MM:SS.ssssss using the 
first argument or a series from stdin or alternative cal format.
'''
Epilog = '''

**Examples**
::

    sec2date 64.123456
    2000-01-01 12:01:04

Add fractional seconds to the format:
::
    echo 64.123456 | ./sec2date -f
    2000-01-01 12:01:04.123456

Multiple lines:
::

    perl -e 'foreach $t ( 64, 315360000 ){print "$t\\n"}' | sec2date
    2000-01-01 12:01:04
    2009-12-29 12:00:00

Get the time of the last residual in and rtgx ($GCORE) run:
::

    tail -1 postfitResiduals.out | cl 1 | sec2date
    2015-01-28 21:15:00

previously with sec2char:
::

    tail -1 postfitResiduals.out | cl 1 | sec2char -
     28-JAN-2015 21:15:00.0000

Use calendar format output:
::

    sec2date -f 475719300 -cal
    2015 01 28 12 15 00.000000

Keywords: sec2char, date, cal2sec

COPYRIGHT:
   Copyright 2015, by the California Institute of Technology.
   ALL RIGHTS RESERVED.
   United States Government Sponsorship acknowledged.
'''

# Define author
__author__   = 'Willy Bertiger'

import sys, argparse # stdin
from datetime import datetime as datetime
from datetime import timedelta as timedelta

def _getParser():
    argParser = argparse.ArgumentParser(description= __doc__, epilog=Epilog, 
                    #formatter_class=argparse.ArgumentDefaultsHelpFormatter)
                    formatter_class=argparse.RawDescriptionHelpFormatter ) 
                    #without this won't write verbatim

    argParser.add_argument('y2ksecs', metavar='secs', type=float, nargs='?', default=None,
                       help='seconds past 2000-01-01 12:00.0000 or read from stdin')

    argParser.add_argument('-fracSecs', action="store_true",default=False,
                                help='''Output YYYY-MM-DD HH:MM:SS.ssssss (microsec)
                                        flag may occur in any order
                                    ''')

    argParser.add_argument('-calFormat', action="store_true",default=False,
                                help='''Output integers and seconds 
                                        yyyy mm dd hh mm ss[.ssssss]
                                        fractional seconds with -fracSecs flag. 
                                        Flag may occur in any order
                                    ''')
    return argParser

if  __name__ == '__main__':
    args = _getParser().parse_args()

    dj2000 = datetime(2000,1,1,12,0,0)

    fmt = '%Y-%m-%d %H:%M:%S'
    if args.fracSecs: fmt = '%Y-%m-%d %H:%M:%S.%f'

    if args.calFormat:
        fmt = '%Y %m %d %H %M %S'
        if args.fracSecs: fmt = '%Y %m %d %H %M %S.%f'


    if args.y2ksecs != None:
        delta = timedelta( seconds=float( args.y2ksecs ) )
        print( (dj2000+delta).strftime(fmt) )
    else:
        for l in sys.stdin:
            delta = timedelta( seconds=float( l ) )
            print( (dj2000+delta).strftime(fmt) )

